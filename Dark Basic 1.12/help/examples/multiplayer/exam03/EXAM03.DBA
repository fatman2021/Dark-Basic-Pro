Rem * Title  : Multiplayer Game
Rem * Author : DBS-LB
Rem * Date   : October 2001
rem ===============================================
rem DARK BASIC EXAMPLE PROGRAM 03
rem ===============================================
rem This program handles Multiplayer Game
rem -----------------------------------------------
set window on : always active on
sync on : sync rate 60 : autocam off : backdrop off

rem Nice font
set text font "Arial"
set text to bold
set text size 16

rem Make swirls
load image "swirl.jpg",112
for t=112 to 114
	make object plain t,2000,2000
	xrotate object t,90
	texture object t,112
	position object t,0,-150,0
	set object t,1,1,1,1,0,0,0
	zrotate object t,rnd(300)
	if t<>112 then ghost object on t
next t

rem Camera Control
position camera 0,500,0
point camera 0,0,0

rem Main Gameloop
initmap=0
do

mc=0
startup=5
mouseclick=0
updatescreen=0
connectionscreen=0
while connectionscreen=0

rem Connection Screen Backdrop
if image exist(99)=1
	paste image 99,0,0
endif
if startup>0
	rem Control swirl
	for t=112 to 114
		position object t,0,-150,0
		zrotate object t,wrapvalue(object angle z(t)-(0.1+((t-112)/5.0)))
	next t
	dec startup
	if startup=0 then get image 99,0,0,640,480
endif

if updatescreen=0
	rem Connection Control
	gosub _connection_screen
else
	rem Update screen prompt
	if updatescreen>0
		if updatedelay>0
			dec updatedelay
		endif
		if updatescreen=1
			center text 320,220,"...CONNECTING..."
		endif
		if updatescreen=2
			center text 320,220,"...ENTERING NET GAME..."
		endif
		if updatescreen=3
			center text 320,220,"...LOADING MEDIA..."
		endif
		if updatedelay=0
			if updatescreen=1 then gosub _make_net_connection
			if updatescreen=2 then gosub _make_net_game
		endif
		if updatedelay=0 then updatescreen=0
	endif
endif

rem Update screen
sync

rem End loop
endwhile

rem Make map
if initmap=0
	dim map(20,20)
	load image "floor.jpg",111
	position camera 500,500,500 : point camera 500,0,500
	lm=1 : make object cube 111,48 : make mesh from object 111,111
	delete object 111 : make object triangle 111,0,0,0,0,0,0,0,0,0
	for z=1 to 18
		for x=1 to 18
			if x/2.0<>int(x/2.0) or z/2.0<>int(z/2.0)
				map(x,z)=cos(x*20)*40
				map(x,z)=map(x,z)+(cos(z*20)*40)
				map(x,z)=1+abs(map(x,z))
				add limb 111,lm,111
				rotate limb 111,lm,wrapvalue(rnd(8)-4),wrapvalue(rnd(8)-4),0
				offset limb 111,lm,x*50,map(x,z),z*50
				inc lm
			else
				map(x,z)=0
			endif
		next x
	next z
	make mesh from object 111,111 : delete object 111
	make object 111,111,0 : color object 111,rgb(256,128,64)
	texture object 111,111
	
	rem Make lights
	set ambient light 0
	set point light 0,0,0,0 : set light range 0,1000
	
	rem Load players
	for plr=1 to 4
	
		rem Player Model
		load image "Alien Rollerbug\alien"+str$(plr)+".dds",plr
		load object "Alien Rollerbug\L-Alien Rollerbug-Move.x",plr
		yrotate object plr,180 : fix object pivot plr
		scale object plr,4000,4000,4000
		set object interpolation plr,5
		set object speed plr,15
		texture object plr,plr
		hide object plr
	
		rem Player Light
		make light plr : set point light plr,0,0,0 : set light range plr,150
	
	next plr
	
	rem Player Data
	plrmax=16
	dim pid(plrmax)
	dim pcol(plrmax)
	dim m(plrmax)
	dim h(plrmax)
	dim i(plrmax)
	dim a#(plrmax)
	dim x#(plrmax)
	dim y#(plrmax)
	dim z#(plrmax)
	dim lasth(plrmax)
	dim score(plrmax)
	dim an(plrmax)
	dim anl(plrmax)
	dim sx#(plrmax)
	dim sy#(plrmax)
	dim sz#(plrmax)
	dim sa#(plrmax)
	dim sd(plrmax)
	dim g#(plrmax)
	
	rem Net vars
	dim colavail(4)

	rem Map and resources created
	initmap=1

endif

rem Setup player and table
for plr=1 to 4 : hide object plr : next plr
for c=0 to 4 : colavail(c)=0 : next c
for plr=0 to 3
	pid(plr)=-1
	pcol(plr)=-1
	m(plr)=0
	h(plr)=0
	gosub _start_plr
	score(plr)=0
	an(plr)=0
	anl(plr)=0
	sx#(plr)=0
	sy#(plr)=0
	sz#(plr)=0
	sa#(plr)=0
	sd(plr)=0
next plr

rem Action Playloop
gameloop=0
set text size 22
while gameloop=0

rem Keep active players visible
plrmax=0
for plr=0 to 3 : hide object 1+plr : hide light 1+plr : next plr
for plr=0 to 3
	plrobj=pcol(plr)
	if plrobj<>-1
		show object plrobj : show light plrobj
		inc plrmax
	endif
next plr

rem Draw Player Scores
tplr=1
w=((plrmax)*150)/2
for plr=0 to 3
	plrobj=pcol(plr)
	if plrobj<>-1
		if plrobj=1 then ink rgb(255,0,0),0
		if plrobj=2 then ink rgb(0,255,0),0
		if plrobj=3 then ink rgb(0,0,255),0
		if plrobj=4 then ink rgb(255,0,255),0
		text (320-w)+((tplr-1)*150)+30,20,"PLAYER : "+str$(score(plr))
		inc tplr
	endif
next plr
ink rgb(255,255,255),0
center text 320,440,"ARROW KEYS TO MOVE   SPACEBAR TO FIRE"

rem Handle Network Data
gosub _network_traffic

rem Hidden stats
if shiftkey()=1
	set cursor 320,160
	ink rgb(255,255,255),0
	print "PLAYER NAMES"
	for plr=0 to 3
		pnumberf=pcol(plr)
		if pnumberf<>-1
			set cursor 320,160+20+(plr*20)
			if pnumberf=1 then ink rgb(255,0,0),0
			if pnumberf=2 then ink rgb(0,255,0),0
			if pnumberf=3 then ink rgb(0,0,255),0
			if pnumberf=4 then ink rgb(255,0,255),0
			print plr;" ";"(";pnumberf;")"
		else
			print plr;" not available"
		endif
	next p
endif

rem Player loop
for plr=0 to 3
plrobj=pcol(plr)
if plrobj>=1 and plrobj<=4

	rem Player Mode
	if m(plr)=0 and h(plr)=0
	
		rem Control player
		oldx#=x#(plr) : oldz#=z#(plr)
		if plr=myplr
			an(plr)=0
			if leftkey()=1 then a#(plr)=wrapvalue(a#(plr)-3)
			if rightkey()=1 then a#(plr)=wrapvalue(a#(plr)+3)
			if upkey()=1 then an(plr)=1 : x#(plr)=newxvalue(x#(plr),a#(plr),2.5) : z#(plr)=newzvalue(z#(plr),a#(plr),2.5)
			if downkey()=1 then an(plr)=2 : x#(plr)=newxvalue(x#(plr),a#(plr),-2.5) : z#(plr)=newzvalue(z#(plr),a#(plr),-2.5)
			if spacekey()=1
				if spaceok=0 and sd(plr)=0
					gosub _cast_psi_wave	
					spaceok=1
				endif
			else
				spaceok=0
			endif
		endif
	
	else
	
		if h(plr)>0
			rem Player Hit
			h(plr)=h(plr)+1
			v#=(50-h(plr))/50.0
			x#(plr)=newxvalue(x#(plr),a#(plr),-5.0*v#)
			z#(plr)=newzvalue(z#(plr),a#(plr),-5.0*v#)
			if h(plr)>50
				h(plr)=0
			endif
		endif
		if m(plr)>0
			rem Player Falling
			mx=(x#(plr)+25)/50
			mz=(z#(plr)+25)/50
			gx#=(mx*50)
			gz#=(mz*50)
			x#(plr)=curvevalue(gx#,x#(plr),10.0)
			z#(plr)=curvevalue(gz#,z#(plr),10.0)
			m(plr)=m(plr)+1
			if m(plr)>150
				if lasth(plr)>0
					score(lasth(plr)-1)=score(lasth(plr)-1)+1
				endif
				m(plr)=0
				gosub _start_plr
			endif
		endif
	
	endif
	if m(plr)>0 or h(plr)>0
		g#(plr)=g#(plr)+0.2
		if g#(plr)>10 then g#(plr)=10
		y#(plr)=y#(plr)-g#(plr)
	endif
	if i(plr)>0
		i(plr)=i(plr)-1
	endif
	
	rem Detect when fall down
	if m(plr)=0
		x#=x#(plr) : z#=z#(plr) : gosub _get_mxmz
		if h(plr)=0
			if map(mx,mz)=0
				m(plr)=1
			else
				y#(plr)=curvevalue(map(mx,mz),y#(plr),15.0)
			endif
		else
			if y#(plr)<map(mx,mz)
				y#(plr)=map(mx,mz)
			endif
		endif
	endif
	
	rem Control any psi wave
	gosub _control_psi_wave	
	
	rem Control player animation
	if an(plr)>0
		if anl(plr)<>an(plr)
			if an(plr)=1 then set object speed plrobj,15
			if an(plr)=2 then set object speed plrobj,-15
			loop object plrobj,5,25
			anl(plr)=an(plr)
		endif
	else
		if anl(plr)<>0
			stop object plrobj
			set object frame plrobj,0
			anl(plr)=0
		endif
	endif
	
	rem Position player
	position object plrobj,x#(plr),25+y#(plr),z#(plr)
	yrotate object plrobj,a#(plr)

rem End player loop
endif
next plr

rem Who is this player..
plr=myplr

rem Track player with camera, light and swirl
position light 0,x#(plr),200+y#(plr),z#(plr)
cy#=curvevalue(200+((y#(plr)*5.0)/2.0),cy#,50.0)
if cy#<100 then cy#=100
position camera 500+((x#(plr)-500)*0.8),cy#,500+((z#(plr)-500)*0.8)
point camera x#(plr),y#(plr),z#(plr)

rem Control swirl
for t=112 to 114
	position object t,x#(plr),-150+((t-112)*10),z#(plr)
	zrotate object t,wrapvalue(object angle z(t)-(0.1+((t-112)/5.0)))
next t

rem Determine exit condition
for plr=0 to 3
	if score(plr)>=10
		gameloop=1+plr
	endif
next plr

rem Update screen
sync

rem End playloop
endwhile

rem Close network game
gosub _close_net_game

rem Win Prompt
set text size 48
while mouseclick()=1 : sync : endwhile
do
	if gameloop>=1 and gameloop<=4
		plr=gameloop-1
		plrobj=pcol(plr)
		if plrobj<>-1
			if plrobj=1 then ink rgb(255,0,0),0
			if plrobj=2 then ink rgb(0,255,0),0
			if plrobj=3 then ink rgb(0,0,255),0
			if plrobj=4 then ink rgb(255,0,255),0
			center text 320,240-24,"PLAYER "+str$(gameloop)+" WINS!"
		endif
	endif
	for t=112 to 114
		position object t,x#(plr),-150+((t-112)*10),z#(plr)
		zrotate object t,wrapvalue(object angle z(t)-(0.1+((t-112)/5.0)))
	next t
	if mouseclick()=1 then exit
	sync
loop
while mouseclick()=1 : sync : endwhile

loop
end

_cast_psi_wave:

rem Start of wave
sx#(plr)=x#(plr)
sy#(plr)=y#(plr)
sz#(plr)=z#(plr)
sa#(plr)=a#(plr)
sd(plr)=15

return

_control_psi_wave:

rem Calculate wave line
if sd(plr)>0
	rem move wave
	x#=sx#(plr) : 	z#=sz#(plr) : gosub _get_mxmz
	sx#(plr)=newxvalue(sx#(plr),sa#(plr),10.0)
	sy#(plr)=curvevalue(map(mx,mz),sy#(plr),20.0)
	sz#(plr)=newzvalue(sz#(plr),sa#(plr),10.0)
	rem show wave as light
	position light plrobj,sx#(plr),100+sy#(plr),sz#(plr)
	l#=(sd(plr)/15.0)
	if plr=0 then color light plrobj,1024*l#,128,128
	if plr=1 then color light plrobj,128,1024*l#,128
	if plr=2 then color light plrobj,128,128,1024*l#
	if plr=3 then color light plrobj,1024*l#,128,1024*l#
	sd(plr)=sd(plr)-1
else
	color light plrobj,0,0,0
endif

rem check wave or plr against other players
for oplr=0 to 3
	if plr<>oplr
		if sd(plr)>0 then checktwomax=1 else checktwomax=0
		for checktwo=0 to checktwomax
			if checktwo=0
				dx#=x#(plr)-x#(oplr)
				dz#=z#(plr)-z#(oplr)
			endif
			if checktwo=1
				dx#=sx#(plr)-x#(oplr)
				dz#=sz#(plr)-z#(oplr)
			endif
			dd#=sqrt(abs(dx#*dx#)+abs(dz#*dz#))
			da#=atanfull(dx#,dz#)
			if dd#<30 and h(oplr)=0 and m(oplr)=0 and i(oplr)=0 and pid(oplr)<>-1
				h(oplr)=(31-(sd(plr)*1.5))
				l#=((50-h(oplr))/50.0)
				g#(oplr)=-4.0*l#
				a#(oplr)=wrapvalue(da#)
				lasth(oplr)=1+plr
			endif
		next checktwo
	endif
next oplr

return

_start_plr:

plrc=pcol(plr)
if plrc=-1 then x#(plr)=500 : z#(plr)=500 : a#(plr)=0
if plrc=1 then x#(plr)=50 : z#(plr)=50 : a#(plr)=45
if plrc=2 then x#(plr)=850 : z#(plr)=50 : a#(plr)=315
if plrc=3 then x#(plr)=850 : z#(plr)=850 : a#(plr)=215
if plrc=4 then x#(plr)=50 : z#(plr)=850 : a#(plr)=135
y#(plr)=500
g#(plr)=0
lasth(plr)=0
i(plr)=150

return

_get_mxmz:
	mx=(x#+25)/50
	mz=(z#+25)/50
	if mx<0 then mx=0
	if mx>19 then mx=19
	if mz<0 then mz=0
	if mz>19 then mz=19
return

_network_traffic:

rem Global net message pump
get net message
while net message exists()
	`
	rem Host wait for initme message from joiners..
	if iam$="host" and net message type()=3
		s$=net message string$()
		pfrom=net message player from()
		if s$="initme"
			rem Send init data to joiner
			s$=""
			for tp=0 to 3
				s$=s$+"|"
				s$=s$+str$(pid(tp))
				s$=s$+","
				s$=s$+str$(pcol(tp))
			next tp
			send net message string 0,s$
		endif
	endif
	`
	rem Wait For Reply..
	if hs<>-1
		if net message player from()=hs	
			if net message type()=3
				s$=net message string$()
				`
				while len(s$)>1
					for n=len(s$) to 1 step -1
						if mid$(s$,n)="|"
							n$=right$(s$,len(s$)-n)
							n=n-1
							exit
						endif
					next n
					s$=left$(s$,n)
					`
					for o=len(n$) to 1 step -1
						if mid$(n$,o)=","
							a$=right$(n$,len(n$)-o)
							o=o-1
							exit
						endif
					next n
					b$=left$(n$,o)
					`
					perform checklist for net players
					for p=1 to checklist quantity()
						id=checklist value a(p)
						uid=checklist value b(p)
						plr=id-1
						if checklist value c(p)=1 then myplr=plr
						if pid(plr)=-1
							if str$(uid)=b$
								rem init player
								pid(plr)=int(val(b$))
								pcol(plr)=val(a$)
								gosub _start_plr
							endif
						endif
					next p
					`
				endwhile
				`
			endif
		endif
	endif
	`
	rem Get other players memblocks and update players here
	if net message type()=4
		plr=net message player from()-1
		if pid(plr)<>-1 and plr<>myplr
			net message memblock 2
			m(plr)=memblock dword(2,4)
			h(plr)=memblock dword(2,8)
			i(plr)=memblock dword(2,12)
			a#(plr)=memblock float(2,16)
			x#(plr)=memblock float(2,20)
			y#(plr)=memblock float(2,24)
			z#(plr)=memblock float(2,28)
			lasth(plr)=memblock dword(2,32)
			score(plr)=memblock dword(2,36)
			an(plr)=memblock dword(2,40)
			sx#(plr)=memblock float(2,48)
			sy#(plr)=memblock float(2,52)
			sz#(plr)=memblock float(2,56)
			sa#(plr)=memblock float(2,60)
			sd(plr)=memblock dword(2,64)
			g#(plr)=memblock float(2,68)
		endif
	endif
	`
	get net message
	`
endwhile

rem Network Traffic - Player Creation
if iam$="host"
	`
	rem Host assigns colours
	perform checklist for net players
	for p=1 to checklist quantity()
		id=checklist value a(p)
		uid=checklist value b(p)
		plr=id-1
		if checklist value c(p)=1 then myplr=plr
		if pcol(plr)=-1
			for tc=1 to 4
				if colavail(tc)=0 then colavail=tc : exit
			next tc
			pid(plr)=uid
			pcol(plr)=colavail
			colavail(colavail)=1
			gosub _start_plr
		endif
	next p
	`
else
	`
	hs=-1
	if inittask=0
		rem Find host id...
		perform checklist for net players
		for p=1 to checklist quantity()
			id=checklist value a(p)
			if checklist value d(p)=1
				hs=id
				inittask=hs
			endif
		next p
		rem Send message to host..who and what colour
		send net message string hs,"initme"
	else
		hs=inittask
	endif
	`
endif

rem Network Traffic - Player Destruction
id=net player destroyed()
if id>0
	plr=id-1
	if plr>=0 and plr<=3
		colavail=pcol(plr)
		if colavail<>-1
			colavail(colavail)=0
			pcol(plr)=-1
			pid(plr)=-1
		endif
	endif
endif

rem Network Traffic - Player Control
plr=myplr

rem [A] Make memblock with latest player data
if memblock exist(1)=0 then make memblock 1,80
write memblock dword 1,4,m(plr)
write memblock dword 1,8,h(plr)
write memblock dword 1,12,i(plr)
write memblock float 1,16,a#(plr)
write memblock float 1,20,x#(plr)
write memblock float 1,24,y#(plr)
write memblock float 1,28,z#(plr)
write memblock dword 1,32,lasth(plr)
write memblock dword 1,36,score(plr)
write memblock dword 1,40,an(plr)
write memblock float 1,48,sx#(plr)
write memblock float 1,52,sy#(plr)
write memblock float 1,56,sz#(plr)
write memblock float 1,60,sa#(plr)
write memblock dword 1,64,sd(plr)
write memblock float 1,68,g#(plr)
rem [B] Send my memblock to everyone
send net message memblock 0,1

return


rem
rem Multiplayer Connection Subroutines
rem

_connection_screen:

	rem Title
	set text size 36
	ink rgb(255,255,255),0
	center text 320,32,"MULTIPLAYER NETWORK GAME"
	mouseclick=0 : mousex=mousex() : mousey=mousey()
	if mouseclick()=1 then mc=1
	if mouseclick()=0 and mc=1 then mouseclick=1 : mc=0
	
	rem Menus..
	if scanforconnections=0
		perform checklist for net connections
		scanforconnections=1
	endif
	if connectiontype=0 and updatescreen=0
		rem Connection
		set text size 22
		center text 320,128,"CHOOSE CONNECTION TYPE"
		butbox=1 : butcol=rgb(64,64,64)
		max=checklist quantity()+1
		for y=1 to max
			`
			if y>0 and y<max then but$=checklist string$(y)
			if y=max then but$="EXIT"
			butx=320 : buty=164+(y*32)
			gosub _connection_button
			`
			if mouseclick=1 and buton=1
				if y=max then end
				connectiontype=y
				if iftcp(but$)=1 or ifmodem(but$)=1
					gosub _enter_address
					connectiondata$=add$
				else
					connectiondata$=""
				endif
				updatescreen=1 : updatedelay=3
				`
				myentry$="MyGame"
				thisentry$=myentry$ : clear entry buffer
				`
				exit
			endif
			`
		next y
		mouseclick=0
	endif
	if connectiontype>0 and updatescreen=0
		`
		rem Can keep monitoring for newly created sessions
		if timer()-timerst>5000
			perform checklist for net sessions
			timerst=timer()
		endif
		`
		rem New Or Existing Game
		set text size 22
		center text 320,128,"CREATE NEW OR JOIN EXISTING GAME"
		butbox=1 : butcol=rgb(64,64,64)
		max=checklist quantity()
		for y=0 to max
			`
			if y=0 then but$="NEW GAME"
			if y>0 then but$=checklist string$(y)
			butx=320 : buty=164+32+(y*32)
			gosub _connection_button
			`
			if mouseclick=1 and buton=1
				if y=0
					iam$="host"
					sessionnumber=-1
					updatescreen=2 : updatedelay=3
				endif
				if y>0
					iam$="joiner"
					sessionnumber=y
					updatescreen=2 : updatedelay=3
				endif
				exit
			endif
			`
		next y
		`
		ink rgb(255,255,255),0
		center text 160,400,"NAME OF GAME:"
		gosub _enter_thisentry
		myentry$=thisentry$
		ink rgb(255,255,0),0
		text 320,400,myentry$+cc$
		`
		mouseclick=0
	endif

return

_connection_button:

	w=220 : h=(text height(but$)/2)
	if butbox=1
		ink rgb(200,200,220),0 : box butx-w,buty-h,butx+w,buty+h
		ink rgb(20,20,30),0 : box (butx-w)+1,(buty-h)+1,butx+w,buty+h
		ink rgb(100,100,120),0 : box (butx-w)+1,(buty-h)+1,(butx+w)-1,(buty+h)-1
	endif
	buton=0
	if mousex>butx-w and mousex<butx+w
		if mousey>buty-h and mousey<buty+h
			buton=1
		endif
	endif
	if buton=1 then ink rgb(255,255,255),0 else ink butcol,0
	center text butx,buty-12,but$

return

_enter_address:

add$=""
do
	if image exist(99)=1 then paste image 99,0,0 else cls rgb(128,128,128)
	ink rgb(255,255,255),0
	center text 320,160,"ENTER ADDRESS"
	if iftcp(but$)=1
		center text 320,400,"Enter 'IP Address' or 'Url of Server'"
	endif
	if ifmodem(but$)=1
		center text 320,400,"Enter 'Phone Number' If Modem Dialing"
		center text 320,430,"Leave blank if Modem Answering"
	endif
	gosub _enter_thisentry
	add$=thisentry$
	center text 320,220,add$+cc$
	if returnkey()=1 then exit
	sync
loop

return

_enter_thisentry:

cc=1-cc : if cc=0 then cc$="_" else cc$=" "
k$=entry$()
clear entry buffer
for k=1 to len(k$)
	y$=mid$(k$,k)
	if asc(y$)=8
		thisentry$=left$(thisentry$,len(thisentry$)-1)
	else
		if asc(y$)>=32
			thisentry$=thisentry$+y$
		endif
	endif
next k

return

_make_net_connection:

if connectiondata$=""
	set net connection connectiontype
else
	set net connection connectiontype,connectiondata$
endif
perform checklist for net sessions

return

_make_net_game:

if iam$="host"
	create net game myentry$,"HOST",2,1
	if net game exists()=0
		do : cls 0 : center text 320,240,"("+str$(statistic(4))+") Could not create the session!!" : sync : loop
	endif
else
	join net game sessionnumber,"JOINER"
	if net game exists()=0
		do : cls 0 : center text 320,240,"("+str$(statistic(4))+") Could not join the session!!" : sync : loop
	endif
endif
if net game exists()=1
	connectionscreen=1
endif

return

_close_net_game:
	rem Free net game
	free net game
	rem Establish what sessions are running
	perform checklist for net sessions
	rem Prepare gamename entry
	thisentry$=myentry$ : clear entry buffer
return

function iftcp(s$)
	res=0
	for n=0 to len(s$)
		if lower$(left$(right$(s$,len(s$)-n),3))="tcp"
			res=1 : exit
		endif
	next n
endfunction res

function ifmodem(s$)
	res=0
	for n=0 to len(s$)-1
		if lower$(left$(right$(s$,len(s$)-n),5))="modem"
			res=1 : exit
		endif
	next n
endfunction res

