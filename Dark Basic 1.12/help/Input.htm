<HTML>
<BODY BACKGROUND="webgfx/dbback.gif" TEXT="White" LINK="Yellow" VLINK="Lime" BGPROPERTIES="FIXED">
<FONT COLOR="Yellow">
<FONT SIZE="6" FACE="Verdana"><center>INPUT COMMAND SET<BR></center>
<FONT SIZE="4"><br>
There are many forms of input data your game can receive in addition to keyboard input. Force-feedback joysticks, mice, joypads, head trackers and 3D gloves all supply input data that you may wish to support, not to mention file system support to scan for files.<br>
<BR>
Click on any commands for more information:<BR>
<FONT COLOR="White">
<br>
<FONT COLOR="Yellow">
<center>STANDARD COMMANDS<BR></center>
<FONT COLOR="White">

<p align="left">
<a href="input/input.htm">INPUT</a> will accept input data from the keyboard<BR>
<a href="input/mhide.htm">HIDE MOUSE</a> will hide the default mouse pointer image<BR>
<a href="input/mshow.htm">SHOW MOUSE</a> will show the default mouse pointer image<BR>
<a href="input/mpos.htm">POSITION MOUSE</a> will reposition the mouse pointer<BR>
<br>
<FONT COLOR="Yellow">
<center>GAME DEVICE COMMANDS<BR></center>
<FONT COLOR="White">
<BR>
<a href="input/cdperf.htm">PERFORM CHECKLIST FOR CONTROL DEVICES</a> will make a list of all devices<BR>
<a href="input/cdsel.htm">SET CONTROL DEVICE</a> will select a known device for use as the current device<BR>
<a href="input/ffup.htm">FORCE UP</a> will force the joystick up if the device is force feedback<BR>
<a href="input/ffdown.htm">FORCE DOWN</a> will force the joystick down if the device is force feedback<BR>
<a href="input/ffleft.htm">FORCE LEFT</a> will force the joystick left if the device is force feedback<BR>
<a href="input/ffright.htm">FORCE RIGHT</a> will force the joystick right if the device is force feedback<BR>
<a href="input/ffangle.htm">FORCE ANGLE</a> will force the joystick direction if the device is force feedback<BR>
<a href="input/ffchain.htm">FORCE CHAINSAW</a> will force a chainsaw effect if the device is force feedback<BR>
<a href="input/ffshoot.htm">FORCE SHOOT</a> will force a gunshot effect if the device is force feedback<BR>
<a href="input/ffimpact.htm">FORCE IMPACT</a> will force a shudder effect if the device is force feedback<BR>
<a href="input/ffnone.htm">FORCE NO EFFECT</a> will stop all force if the device is force feedback<BR>
<a href="input/ffwater.htm">FORCE WATER EFFECT</a> will simulate water movement if the device is force feedback<BR>
<a href="input/ffacon.htm">FORCE AUTO CENTER ON</a> will activate autocenter if the device is force feedback<BR>
<a href="input/ffacoff.htm">FORCE AUTO CENTER OFF</a> will deactivate autocenter if the device is force feedback<BR>
<BR>
<FONT COLOR="Yellow">
<center>FTP COMMANDS<BR></center>
<FONT COLOR="White">
<BR>
<a href="input/ftc.htm">FTP CONNECT</a> connect to FTP site<BR>
<a href="input/fsd.htm">FTP SET DIR</a> go to an FTP directory<BR>
<a href="input/fff.htm">FTP FIND FIRST</a> find first ftp file in current ftp directory<BR>
<a href="input/ffn.htm">FTP FIND NEXT</a> find next ftp file in current ftp directory<BR>
<a href="input/fpf.htm">FTP PUT FILE</a> copy local file into current ftp directory <BR>
<a href="input/fdf.htm">FTP DELETE FILE</a> delete ftp file from current ftp directory<BR>
<a href="input/fgf.htm">FTP GET FILE</a> copy file from ftp to local directory<BR>
<a href="input/fgfff.htm">FTP GET FILE</a> use FTP PROCEED to grab<BR>
<a href="input/fdd.htm">FTP DISCONNECT</a> disconnect from ftp site<BR>
<a href="input/ftp.htm">FTP PROCEED</a> grab another chunk of the downloading file started by FTP GET FILE<BR>
<a href="input/ftt.htm">FTP TERMINATE</a> terminate a current download started by FTP GET FILE<BR>
<BR>
<FONT COLOR="Yellow">
<center>FILE SYSTEM COMMANDS<BR></center>
<FONT COLOR="White">
<BR>
<a href="input/fsdir.htm">DIR</a> will list files in the current directory to the screen<BR>
<a href="input/fsdrive.htm">DRIVELIST</a> will list available drives to the screen<BR>
<a href="input/fscdir.htm">PERFORM CHECKLIST FOR FILES</a> will perform checklist for files in the current directory<BR>
<a href="input/fscdrive.htm">PERFORM CHECKLIST FOR DRIVES</a> will perform checklist for available drives<BR>
<a href="input/fssetdir.htm">SET DIR</a> will set the current directory<BR>
<a href="input/fscd.htm">CD</a> will set the current directory<BR>
<a href="input/fsfirst.htm">FIND FIRST</a> will find the first file in the current directory<BR>
<a href="input/fsnext.htm">FIND NEXT</a> will find the next file in the current directory<BR>
<br>

<a href="input/fsmake.htm">MAKE FILE</a> will make an empty file<BR>
<a href="input/fsdelete.htm">DELETE FILE</a> will delete an existing file<BR>
<a href="input/fscopy.htm">COPY FILE</a> will copy an existing file<BR>
<a href="input/fsmove.htm">MOVE FILE</a> will move an existing file<BR>
<a href="input/fsrename.htm">RENAME FILE</a> will rename an existing file<BR>
<a href="input/fsexec.htm">EXECUTE FILE</a> will shell execute a file<BR>
<br>

<a href="input/fsmkdir.htm">MAKE DIRECTORY</a> will create a new directory<BR>
<a href="input/fsrmdir.htm">DELETE DIRECTORY</a> will delete an existing directory<BR>
<br>

<a href="input/fsopenr.htm">OPEN TO READ</a> will open a file for reading<BR>
<a href="input/fsopenw.htm">OPEN TO WRITE</a> will open a file for writing<BR>
<a href="input/fsclose.htm">CLOSE FILE</a> will close a file that is open<BR>
<br>
<a href="input/fsread.htm">READ FILE</a> will read a longword from an open file<BR>
<a href="input/fsreadb.htm">READ BYTE</a> will read a byte from an open file<BR>
<a href="input/fsreadw.htm">READ WORD</a> will read a word from an open file<BR>
<a href="input/fsreadl.htm">READ LONG</a> will read a longword from an open file<BR>
<a href="input/fsreadf.htm">READ FLOAT</a> will read a float from an open file<BR>
<a href="input/fsreads.htm">READ STRING</a> will read a string from an open file<BR>
<br>
<a href="input/fswrite.htm">WRITE FILE</a> will write a longword to an open file<BR>
<a href="input/fswriteb.htm">WRITE BYTE</a> will write a byte to an open file<BR>
<a href="input/fswritew.htm">WRITE WORD</a> will write a word to an open file<BR>
<a href="input/fswritel.htm">WRITE LONG</a> will write a longword to an open file<BR>
<a href="input/fswritef.htm">WRITE FLOAT</a> will write a float to an open file<BR>
<a href="input/fswrites.htm">WRITE STRING</a> will write a string to an open file<BR>
<br>
<a href="input/ref.htm">READ FILEBLOCK</a> extract an entire file from a pack file<BR>
<a href="input/red.htm">READ DIRBLOCK</a> extracts an entire directory from a pack file<BR>
<a href="input/wrf.htm">WRITE FILEBLOCK</a> writes a file to a pack file<BR>
<a href="input/wrd.htm">WRITE DIRBLOCK</a> writes an entire directory to a pack file<BR>
<br>
<a href="input/makemb.htm">MAKE MEMBLOCK FROM FILE</a> extract a memblock from a file<BR>
<a href="input/readmb.htm">READ MEMBLOCK</a> will read a memblock from an open file<BR>
<a href="input/writemb.htm">WRITE MEMBLOCK</a> will write a memblock from an open file<BR>
<br>
<a href="input/clipw.htm">WRITE TO CLIPBOARD</a> will write a string to the clipboard<BR>
<a href="input/writereg.htm">WRITE TO REGISTRY</a> will write a value to the registry<BR>
<a href="input/clentry.htm">CLEAR ENTRY BUFFER</a> will clear the keyboard entry buffer<BR>
<br>

<FONT COLOR="Yellow">
The next commands will return a result:<br>
<FONT COLOR="White">
<BR>
<a href="input/mx.htm">MOUSEX()</a> will return the current X position of the mouse pointer<BR>
<a href="input/my.htm">MOUSEY()</a> will return the current Y position of the mouse pointer<BR>
<a href="input/mz.htm">MOUSEZ()</a> will return the current Z position of the mouse pointer<BR>
<br>
<a href="input/mmovex.htm">MOUSEMOVEX()</a> will return the current X movement of the mouse pointer<BR>
<a href="input/mmovey.htm">MOUSEMOVEY()</a> will return the current Y movement of the mouse pointer<BR>
<a href="input/mmovez.htm">MOUSEMOVEZ()</a> will return the current Z movement of the mouse pointer<BR>
<a href="input/mclick.htm">MOUSECLICK()</a> will return a one if a the left mouse button is pressed<BR>
<br>
<a href="input/kinkey.htm">INKEY$()</a> will return key character string currently pressed<BR>
<a href="input/kup.htm">UPKEY()</a> will return a one if the Up Arrow Key is being pressed<BR>
<a href="input/kdown.htm">DOWNKEY()</a> will return a one if the Down Arrow Key is being pressed<BR>
<a href="input/kleft.htm">LEFTKEY()</a> will return a one if the Left Arrow Key is being pressed<BR>
<a href="input/kright.htm">RIGHTKEY()</a> will return a one if the Right Arrow Key is being pressed<BR>
<a href="input/kcontrol.htm">CONTROLKEY()</a> will return a one if the Control Key is being pressed<BR>
<a href="input/kshift.htm">SHIFTKEY()</a> will return a one if the Shift Key is being pressed<BR>
<a href="input/kspace.htm">SPACEKEY()</a> will return a one if the Space Key is being pressed<BR>
<a href="input/kreturn.htm">RETURNKEY()</a> will return a one if the Return Key is being pressed<BR>
<a href="input/kesc.htm">ESCAPEKEY()</a> will return a one if the Escape Key is being pressed<BR>
<a href="input/kstate.htm">KEYSTATE()</a> will return a one if the key specified by the scancode is pressed<BR>
<a href="input/kscan.htm">SCANCODE()</a> will return the key scancode value currently pressed<BR>
<br>

<a href="input/jx.htm">JOYSTICK X()</a> will return the X axis value of the the default analogue joystick<BR>
<a href="input/jy.htm">JOYSTICK Y()</a> will return the Y axis value of the the default analogue joystick<BR>
<a href="input/jz.htm">JOYSTICK Z()</a> will return the Z axis value of the the default analogue joystick<BR>
<br>
<a href="input/jfx.htm">JOYSTICK FIRE X()</a> support to read upto 32 fire buttons <BR>
<a href="input/jba.htm">JOYSTICK FIRE A()</a> will return a one if the default joystick fire button A is pressed<BR>
<a href="input/jbb.htm">JOYSTICK FIRE B()</a> will return a one if the default joystick fire button B is pressed<BR>
<a href="input/jbc.htm">JOYSTICK FIRE C()</a> will return a one if the default joystick fire button C is pressed<BR>
<a href="input/jbd.htm">JOYSTICK FIRE D()</a> will return a one if the default joystick fire button D is pressed<BR>
<br>
<a href="input/jup.htm">JOYSTICK UP()</a> will return a one, if the default digital joystick is pushed up<BR>
<a href="input/jdown.htm">JOYSTICK DOWN()</a> will return a one, if the default digital joystick is pushed down<BR>
<a href="input/jleft.htm">JOYSTICK LEFT()</a> will return a one, if the default digital joystick is pushed left<BR>
<a href="input/jright.htm">JOYSTICK RIGHT()</a> will return a one, if the default digital joystick is pushed right<BR>
<a href="input/jsa.htm">JOYSTICK SLIDER A()</a> will return the Slider A value of the the default joystick<BR>
<a href="input/jsb.htm">JOYSTICK SLIDER B()</a> will return the Slider B value of the the default joystick<BR>
<a href="input/jos.htm">JOYSTICK SLIDER C()</a> will return the Slider C value of the the default joystick<BR>
<a href="input/jsd.htm">JOYSTICK SLIDER D()</a> will return the Slider D value of the the default joystick<BR>
<a href="input/jtx.htm">JOYSTICK TWIST X()</a> support for reading joystick X twist<BR>
<a href="input/jty.htm">JOYSTICK TWIST Y()</a> support for reading joystick Y twist<BR> 
<a href="input/jtz.htm">JOYSTICK TWIST Z()</a> support for reading joystick Z twist<BR>
<a href="input/jha.htm">JOYSTICK HAT ANGLE()</a> support for reading upto 4 HAT controllers <BR>
<br>
<a href="input/cdname.htm">CONTROL DEVICE NAME$()</a> will return a string of the name of the current control device<BR>
<a href="input/cdx.htm">CONTROL DEVICE X()</a> will return the X axis value of the current control device<BR>
<a href="input/cdy.htm">CONTROL DEVICE Y()</a> will return the Y axis value of the current control device<BR>
<a href="input/cdz.htm">CONTROL DEVICE Z()</a> will return the Z axis value of the current control device<BR>
<br>
<a href="input/gfs.htm">GET FTP STATUS()</a> returns zero if the ftp connection has failed<BR>
<a href="input/gfd.htm">GET FTP DIR$()</a> returns the current ftp directory<BR>
<a href="input/gffn.htm">GET FTP FILE NAME$()</a> returns the ftp filename <BR>
<a href="input/gfft.htm">GET FTP FILE TYPE()</a> returns the ftp filetype <BR>
<a href="input/gffs.htm">GET FTP FILE SIZE()</a> returns the size of the current ftp file being pointed at<BR>
<a href="input/gfp.htm">GET FTP PROGRESS()</a> returns a percentage of the file being downloaded<BR>
<a href="input/gffail.htm">GET FTP FAILURE()</a> returns a one if the previous ftp command failed<BR>
<a href="input/gferrs.htm">GET FTP ERROR$()</a> returns a string containing the ftp failure description<BR>
<BR>

<a href="input/fsgetdir.htm">GET DIR$()</a> will get the current directory<BR>
<a href="input/fsname.htm">GET FILE NAME$()</a> will get the current filename in the search<BR>
<a href="input/fsdate.htm">GET FILE DATE$()</a> will get the current file date in the search<BR>
<a href="input/fstype.htm">GET FILE TYPE()</a> will get the current file type in the search<BR>
<br>

<a href="input/fsexist.htm">FILE EXIST()</a> will return a one if the specified file exists<BR>
<a href="input/fspexist.htm">PATH EXIST()</a> will return a one if the specified directory exists<BR>
<a href="input/fssize.htm">FILE SIZE()</a> will return the size in bytes of the specified file<BR>
<a href="input/fsisopen.htm">FILE OPEN()</a> will return a one if the specified file is open<BR>
<a href="input/fsisend.htm">FILE END()</a> will return a one if the specified file has no more data to read<BR>

<br>

<a href="input/clipr.htm">GET CLIPBOARD$()</a> will return a string stored in the clipboard<BR>
<a href="input/readreg.htm">GET REGISTRY()</a> will read a value from the registry<BR>
<a href="input/entry.htm">ENTYR$()</a> will return the contents of the keyboard entry buffer<BR>
<a href="input/wid.htm">WINDIR$()</a> returns the name of your windows directory<BR>

</p>
</BODY>
</HTML>
